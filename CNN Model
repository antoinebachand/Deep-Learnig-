{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Copie de Copy of Fall-2021-DLC-LAB-03.ipynb",
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/antoinebachand/Deep-Learnig-/blob/main/CNN%20Model\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "WaUOA7dd7vEr"
      },
      "source": [
        "# **CNN Model**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "cGfO8C2R8irj"
      },
      "source": [
        "# Import necessary libraries\n",
        "import torch\n",
        "import torch.nn as nn\n",
        "import torchvision\n",
        "from torchvision import datasets, transforms\n",
        "\n",
        "# Download an existing dataset(MNIST).\n",
        "train_ds = datasets.MNIST('',train=True, download=True,\n",
        "                          transform=transforms.Compose([transforms.ToTensor(),\n",
        "                                                        transforms.Normalize((.30,), (0.3,))]))\n",
        "test_ds = datasets.MNIST('',train=False, download=True,\n",
        "                          transform=transforms.Compose([transforms.ToTensor(),\n",
        "                                                        transforms.Normalize((0.3,), (0.3,))]))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "HBqLDG9D6TP7"
      },
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "pptL0vPz883L"
      },
      "source": [
        ""
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "YNoM5Csz0_1M"
      },
      "source": [
        "# Create dataloaders\n",
        "train_dl = torch.utils.data.DataLoader(train_ds, batch_size=100, shuffle=True)\n",
        "test_dl = torch.utils.data.DataLoader(test_ds, batch_size=100, shuffle=False)"
      ],
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bgpaxXIE2ZXr",
        "outputId": "54e7928b-67ff-40aa-c017-9333e634578b"
      },
      "source": [
        "# Create Neural Network Model (ANN)\n",
        "class MyANN(nn.Module):\n",
        "  \n",
        "  def __init__(self):\n",
        "    super().__init__()\n",
        "    self.fc1 = nn.Linear(28*28, 64)  # I know the dimension of the images is 28 x 28.\n",
        "    self.av1 = nn.ReLU()\n",
        "    self.fc2 = nn.Linear(64, 64)  \n",
        "    self.av2 = nn.ReLU()\n",
        "    self.fc3 = nn.Linear(64, 10)  \n",
        "    return\n",
        "\n",
        "\n",
        "  def forward(self, x):\n",
        "    x = self.fc1(x)\n",
        "    x = self.av1(x)\n",
        "    x = self.fc2(x)\n",
        "    x = self.av2(x)\n",
        "    x = self.fc3(x)\n",
        "    return nn.functional.log_softmax(x, dim=1)\n",
        "\n",
        "net = MyANN()\n",
        "print(net)\n"
      ],
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "MyANN(\n",
            "  (fc1): Linear(in_features=784, out_features=64, bias=True)\n",
            "  (av1): ReLU()\n",
            "  (fc2): Linear(in_features=64, out_features=64, bias=True)\n",
            "  (av2): ReLU()\n",
            "  (fc3): Linear(in_features=64, out_features=10, bias=True)\n",
            ")\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3Tjl8QW4xw9G",
        "outputId": "f9f45ea4-0cc6-4982-8374-6cfc2198472b"
      },
      "source": [
        "from torchsummary import summary\n",
        "# Create Convolutional Neural Network Model (ANN)\n",
        "class MyCNN(nn.Module):\n",
        "  \n",
        "  def __init__(self):\n",
        "    super().__init__()\n",
        "    \n",
        "    self.layer_1 = nn.Sequential(\n",
        "        # 28 x 28 x 1\n",
        "        nn.Conv2d(1, 10, kernel_size=(5,5), stride=1, padding=2),  # 28 - 5 + 1 = 24;  24 x 24   With padding 28 x 28\n",
        "        nn.ReLU(),\n",
        "        nn.MaxPool2d(kernel_size=2, stride=2)  # 12 x 12   With padding: 14 x 14\n",
        "    )\n",
        "\n",
        "    self.layer_2 = nn.Sequential(\n",
        "        # 1 x 14 x 14\n",
        "        nn.Conv2d(10, 20, kernel_size=5, stride=1, padding=2),  \n",
        "        nn.ReLU(),\n",
        "        nn.MaxPool2d(kernel_size=2, stride=2) \n",
        "    )    \n",
        "    self.layer_3 = nn.Flatten()\n",
        "    self.layer_4 = nn.Linear(20*7*7, 10)\n",
        "    return\n",
        "\n",
        "\n",
        "  def forward(self, x):\n",
        "    x = self.layer_1(x)\n",
        "    x = self.layer_2(x)\n",
        "    x = self.layer_3(x) # Flatten\n",
        "    x = self.layer_4(x)\n",
        "    return nn.functional.log_softmax(x, dim=1)\n",
        "\n",
        "net = MyCNN()\n",
        "print(net)\n",
        "summary(net,(1,28,28))"
      ],
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "MyCNN(\n",
            "  (layer_1): Sequential(\n",
            "    (0): Conv2d(1, 10, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n",
            "    (1): ReLU()\n",
            "    (2): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n",
            "  )\n",
            "  (layer_2): Sequential(\n",
            "    (0): Conv2d(10, 20, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))\n",
            "    (1): ReLU()\n",
            "    (2): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n",
            "  )\n",
            "  (layer_3): Flatten(start_dim=1, end_dim=-1)\n",
            "  (layer_4): Linear(in_features=980, out_features=10, bias=True)\n",
            ")\n",
            "----------------------------------------------------------------\n",
            "        Layer (type)               Output Shape         Param #\n",
            "================================================================\n",
            "            Conv2d-1           [-1, 10, 28, 28]             260\n",
            "              ReLU-2           [-1, 10, 28, 28]               0\n",
            "         MaxPool2d-3           [-1, 10, 14, 14]               0\n",
            "            Conv2d-4           [-1, 20, 14, 14]           5,020\n",
            "              ReLU-5           [-1, 20, 14, 14]               0\n",
            "         MaxPool2d-6             [-1, 20, 7, 7]               0\n",
            "           Flatten-7                  [-1, 980]               0\n",
            "            Linear-8                   [-1, 10]           9,810\n",
            "================================================================\n",
            "Total params: 15,090\n",
            "Trainable params: 15,090\n",
            "Non-trainable params: 0\n",
            "----------------------------------------------------------------\n",
            "Input size (MB): 0.00\n",
            "Forward/backward pass size (MB): 0.21\n",
            "Params size (MB): 0.06\n",
            "Estimated Total Size (MB): 0.27\n",
            "----------------------------------------------------------------\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UB0TM7il3xY5",
        "outputId": "489c0529-4c9d-4d39-d7f9-2fcb5bee542c"
      },
      "source": [
        "# Train my neural network.\n",
        "optimizer = torch.optim.Adam(net.parameters(), lr=0.001)\n",
        "for epocs in range(5):\n",
        "  for data in train_dl:\n",
        "    X, y = data\n",
        "    optimizer.zero_grad() # clear gradient information.\n",
        "    output = net(X)\n",
        "    loss = nn.functional.nll_loss(output, y)\n",
        "    loss.backward() # do pack-propagation step\n",
        "    optimizer.step() # tell optimizer that you finished batch/iteration.\n",
        "  print(loss.data)\n",
        "\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "tensor(0.1364)\n",
            "tensor(0.0262)\n",
            "tensor(0.0088)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rTEd-lr4A3KC"
      },
      "source": [
        "# Evaluate the trained network.\n",
        "total = 0\n",
        "correct = 0\n",
        "with torch.no_grad():   # No need for keepnig track of necessary changes to the gradient.\n",
        "  for data in test_dl:\n",
        "    X, y = data\n",
        "    output = net(X)\n",
        "    for idx, val in enumerate(output):\n",
        "      if torch.argmax(val) == y[idx]:\n",
        "        correct += 1\n",
        "      total += 1\n",
        "  print('Accuracy:', round(correct/total, 3))\n",
        "\n"
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}